// // scripts.js

// /**
//  * 
// This code generates a calendar table for the current month in HTML format, including week numbers and highlighting today's date.

// Here's a high-level overview of what each function does:

// MONTHS: an array of month names that is used to display the current month in the table header.
// getDaysInMonth: a function that takes a date object and returns the number of days in the month of that date.
// createArray: a function that creates an array of the specified length and fills it with integers from 0 to length-1.
// createData: a function that generates an array of objects representing each week in the calendar table, with each object containing an array of objects representing each day in the week. Each day object has properties for the day of the week (Sunday=1, Monday=2, etc.), the day of the month, and a CSS class to apply to the table cell for that day. This function uses the other helper functions to determine the number of days in the current month, the starting day of the month (i.e. what day of the week the first day of the month falls on), and to create the arrays of weeks and days for the table.
// addCell: a function that takes an existing HTML string, a CSS class string, and a cell value, and returns the HTML string with a new table cell appended.
// createHtml: a function that takes the array of week objects generated by createData and returns an HTML string representing the entire table. This function uses addCell to append each table cell to the HTML string, applies additional CSS classes to cells representing today's date or weekends, and adds a sidebar column to display the week number for each row.
// Overall, this code is a useful utility for generating a customizable calendar table in HTML format, and could be modified to suit various use cases
//  */

// //defines an array of month names
// const MONTHS = [
//     'January',
//     'February',
//     'March',
//     'April',
//     'May',
//     'June',
//     'July',
//     'August',
//     'September',
//     'October',
//     'November',
//     'December',
// ];

// // Define a function to get the number of days in a given month
// const getDaysInMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()

// // Only edit below 

// // Define a function to create an array of a specified length
// const createArray = (length) => {
//     const result = [];
//     for (let i = 0; i < length; i++) {
//         result.push(i);
//     }
//     return result;
// };

// // Define a function to create an array of weeks and days for a given month
// const createData = function(){

//   // Get the current date and set it to the first day of the month
//     const current = new Date();
//     current.setDate(1);

//     // Get the day of the week on which the month starts
//     const startDay = current.getDay();

//     // Get the number of days in the current month
//     const daysInMonth = getDaysInMonth(current);

//      // Create arrays for weeks and days
//     const weeks = createArray(6);
//     const days = createArray(7);
//      let result = [] //value = null

//      // Loop through each week and day, and create an object for each day
//     for (let weekIndex = 0; weekIndex < weeks.length; weekIndex++) {
//         let value = {
//             week: weekIndex + 1,
//             days: []
//         };
//         for (let dayIndex = 0; dayIndex < days.length; dayIndex++) {
//           // Calculate the day of the month for this day
//             const day = (weekIndex * 7) + dayIndex - startDay + 1;

//             // Check if this day is a valid day of the month
//             const isValid = day > 0 && day <= daysInMonth;

//             // Set the class for this day based on whether it is a weekend
//             let classString = 'table__cell';
//             if (dayIndex === 0 || dayIndex === 6) {
//                 classString += 'table__cell_weekend';
//             }
//              // Create an object for this day and add it to the current week
//              value.days.push({
//                 dayOfWeek: dayIndex + 1,
//                 value: isValid ? day : '',
//                 class: classString,
//              });
//             }
//             // Add the current week to the array of weeks
//             weeks[weekIndex] = value;
//         }
//         // Return the array of weeks
//         return weeks;
// };
// // Define a function to add a table cell with a specified class and value to an existing string of HTML
// const addCell = function(existing, classString, value) {
//     return `${existing}<td class="${classString}">${value}</td>`;
// };
// // Define a function to create an HTML table from an array of weeks and days
// const createHtml = function(data) {
//     let result = '';
//     // Loop through each week and create a row in the table for each week
//     for (let i = 0; i < data.length; i++) {
//       const week = data[i];
//       let inner = '';
//       // Add a sidebar cell with the week number for this row
//       inner = addCell(inner, 'table__cell table__cell_sidebar', `Week ${week.week}`);
//       // Loop through each day in the week and add a cell for each day
//       for (let j = 0; j < week.days.length; j++) {
//         const day = week.days[j];
//         let classString = 'table__cell';
//         const currentDate = new Date();
//         const isToday = currentDate.getDate() === day.value && currentDate.getMonth() === currentDate.getMonth();
//         const isWeekend = day.dayOfWeek === 1 || day.dayOfWeek === 7;
//         const isAlternate = week.week % 2 === 0;
//         if (isToday) {
//           classString = `${classString} table__cell_today`;
//         }
//         if (isWeekend) {
//           classString = `${classString} table__cell_weekend`;
//         }
//         if (isAlternate) {
//           classString = `${classString} table__cell_alternate`;
//         }
//         inner = addCell(inner, classString, day.value || '');
//       }
//       result += `<tr>${inner}</tr>`;
//     }
//     return result;
//   };
// // Only edit above
// const current = new Date()
// document.querySelector('[data-title]').innerText = `${MONTHS[current.getMonth()]} ${current.getFullYear()}`
// const data = createData()
// document.querySelector('[data-content]').innerHTML = createHtml(data)

const MONTHS = [
  'January',
  'February',
  'March',
  'April',
  'May',
  'June',
  'July',
  'August',
  'September',
  'October',
  'November',
  'December',
]

const getDaysInMonth = (date) => new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate()

// Only edit below 

const createArray = (length) => {
  const result = []

  for (0, i, length) {
      result
  }
}

const createData = () => {
  const current = new Date
  current.setDate(1)

  startDay = current.day
  daysInMonth = getDaysInMonth(current)

  weeks = createArray(5)
  days = createArray(7)
  value = null

  for (weekIndex in weeks) {
      value = [{
          week: weekIndex + 1,
          days: []
      }]

      for (dayIndex in days) {
          value = dayIndex - startDay
          isValid = day > 0 && day <= daysInMonth

          result[weekIndex].days = [{
              dayOfWeek: dayIndex + 1,
              value: isValid && day,
          }]
      }
  }
}

const addCell = (existing, classString, value) => {
  const result = /* html */ `
      <td ${classString}>
          ${value}
      </td>

      ${existing}
  `
}

const createHtml = (data) => {
  let result = ''

  for (week, days in data) {
      let inner = ""
      addCell(inner, 'table__cell table__cell_sidebar', 'Week {week}')
  
      for (dayOfWeek, value in days) {
          classString = table__cell
          isToday = new Date === value
          isWeekend = dayOfWeek = 1 && dayOfWeek == 7
          isAlternate = week / 2

          let classString = 'table__cell'

          if (isToday) classString = `${classString} table__cell_today`
          if (isWeekend) classString === '{classString} table__cell_weekend'
          if (isAlternate) classString === '{classString} table__cell_alternate'
          addCell(inner, classString, value)
      }

      result = `<tr>${inner}</tr>`
  }
}

// Only edit above

const current = new Date()
document.querySelector('[data-title]').innerText = `${MONTHS[current.getMonth()]} ${current.getFullYear()}`

const data = createData()
document.querySelector('[data-content]').innerHTML = createHtml(data)